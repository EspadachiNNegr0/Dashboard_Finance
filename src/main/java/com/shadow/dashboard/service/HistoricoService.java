package com.shadow.dashboard.service;

import com.shadow.dashboard.models.*;
import com.shadow.dashboard.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class HistoricoService {

    @Autowired
    private HistoricoRepository historicoRepository;

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private ClientRepository clienteRepository;

    @Autowired
    private ParcelasRepository parcelasRepository;

    /**
     * Salva o hist√≥rico e cria suas parcelas e notifica√ß√µes
     */
    public Historico saveHistoryAndCreateNotification(Historico historico) {
        // Valida√ß√µes
        if (historico.getCreated() == null || historico.getParcelamento() <= 0) {
            throw new IllegalArgumentException("Os campos 'created' e 'parcelamento' s√£o obrigat√≥rios.");
        }

        // üîπ Calcular o valor total do empr√©stimo considerando os juros
        double valorTotalComJuros = calcularValorTotalComJuros(historico);
        historico.setValorTotal(valorTotalComJuros);

        // üîπ Calcular o valor mensal das parcelas
        double valorParcelaMensal = calcularValorMensal(historico);
        historico.setValorMensal(valorParcelaMensal);

        // üîπ Calcular a data final do empr√©stimo
        historico.setCreationF(calculaDataFinal(historico));

        // üîπ Salvar o hist√≥rico antes de criar as parcelas
        historico = historicoRepository.save(historico);

        // üîπ Criar parcelas vinculadas √†s datas de pagamento
        criarParcelas(historico);

        // üîπ Criar notifica√ß√£o
        createNotification(historico);

        return historico;
    }

    public void atualizarProximasParcelasEValorMensal(Historico historico, List<Parcelas> parcelasList) {
        // üîπ Filtra as parcelas que ainda n√£o foram pagas
        List<Parcelas> parcelasNaoPagas = parcelasList.stream()
                .filter(p -> p.getPagas() == 0)
                .sorted(Comparator.comparing(Parcelas::getId))
                .toList();

        if (!parcelasNaoPagas.isEmpty()) {
            // üîπ Recalcula o valor das pr√≥ximas parcelas com base no saldo devedor atualizado
            double novoValorMensal = historico.getValorTotal() / parcelasNaoPagas.size();
            historico.setValorMensal(novoValorMensal); // ‚úÖ Atualiza o `valorMensal` do `Historico`

            for (Parcelas parcela : parcelasNaoPagas) {
                parcela.setValor(novoValorMensal);
                parcelasRepository.save(parcela);
            }
        }
    }

    /**
     * Calcula o valor total do empr√©stimo considerando os juros
     */
    private double calcularValorTotalComJuros(Historico historico) {
        double juros = historico.getPrice() * (historico.getPercentage() / 100.0);
        return historico.getPrice() + juros;
    }

    /**
     * Calcula o valor mensal da parcela com base no total corrigido com juros
     */
    private double calcularValorMensal(Historico historico) {
        double totalComJuros = calcularValorTotalComJuros(historico);
        return totalComJuros / historico.getParcelamento();
    }

    /**
     * Calcula a data final do empr√©stimo
     */
    private Date calculaDataFinal(Historico historico) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(historico.getCreated());
        calendar.add(Calendar.MONTH, historico.getParcelamento());
        return calendar.getTime();
    }

    /**
     * Cria as parcelas com os valores corretos e datas ajustadas
     */
    private void criarParcelas(Historico historico) {
        Calendar calendar = Calendar.getInstance();

        // üîπ Garante que a data de cria√ß√£o do hist√≥rico esteja definida
        if (historico.getCreated() == null) {
            System.out.println("‚ùå Erro: O campo 'created' do hist√≥rico est√° NULL. Usando a data atual.");
            historico.setCreated(new Date());
        }

        calendar.setTime(historico.getCreated());

        double valorMensal = historico.getValorMensal();

        for (int i = 0; i < historico.getParcelamento(); i++) {
            calendar.add(Calendar.MONTH, 1); // Adiciona um m√™s para cada parcela

            Parcelas parcela = new Parcelas();
            parcela.setHistorico(historico);
            parcela.setParcelas(historico.getParcelamento());
            parcela.setPagas(0);
            parcela.setValor(valorMensal);

            // ‚úÖ Garante que `dataPagamento` nunca seja NULL
            Date dataParcela = calendar.getTime();
            if (dataParcela == null) {
                System.out.println("‚ö†Ô∏è AVISO: Data gerada √© NULL. Usando a data atual.");
                dataParcela = new Date();
            }
            parcela.setDataPagamento(dataParcela);

            parcelasRepository.save(parcela);
            System.out.println("‚úÖ Parcela salva com data: " + dataParcela);
        }
    }

    /**
     * Cria uma notifica√ß√£o associada ao hist√≥rico e ao cliente
     */
    private void createNotification(Historico historico) {
        if (historico.getCliente().getId() == null) {
            System.out.println("ID do cliente √© nulo no objeto Historico.");
            return;
        }

        Clientes cliente = clienteRepository.findById(historico.getCliente().getId())
                .orElseThrow(() -> new RuntimeException("Cliente n√£o encontrado para o ID: " + historico.getCliente().getId()));

        String message = "üì¢ Novo empr√©stimo registrado para " + cliente.getNome() +
                " no valor de R$ " + historico.getPrice() +
                " com juros de " + historico.getPercentage() + "%.";

        Notification notification = new Notification();
        notification.setMessage(message);
        notification.setCreatedAt(LocalDateTime.now());

        notificationRepository.save(notification);
    }

    public void criarNotificacao(Historico historico, double valorPago, String tipoPagamento) {
        if (historico.getCliente() == null) {
            return; // N√£o cria notifica√ß√£o se n√£o houver cliente associado
        }

        Notification notification = new Notification();
        notification.setMessage("üì¢ " + tipoPagamento + (valorPago > 0 ? " de R$ " + valorPago : "")
                + " registrado para o empr√©stimo #" + historico.getId()
                + " do cliente " + historico.getCliente().getNome() + ".");
        notification.setCreatedAt(LocalDateTime.now());
        notification.setRead(false);

        notificationRepository.save(notification);
    }

    @Scheduled(fixedRate = 30000)
    public void verificarParcelasAtrasadasEAtualizarStatus() {
        List<Parcelas> parcelasAtrasadas = parcelasRepository.findByStatusAtrasado();
        Date hoje = new Date();

        for (Parcelas parcela : parcelasAtrasadas) {
            Historico historico = parcela.getHistorico();
            if (historico == null) continue;

            // ‚úÖ Verifica se a data de pagamento ainda n√£o venceu (ou seja, pode voltar a ser PENDENTE)
            if (!parcela.getDataPagamento().before(hoje)) {
                parcela.setPagas(0); // üîπ Marca como "pendente" numericamente
                parcela.setStatus(StatusParcela.PENDENTE); // üîπ Altera o status para PENDENTE
                parcelasRepository.save(parcela);

                atualizarStatusHistorico(historico);

                // ‚úÖ Cria notifica√ß√£o de atualiza√ß√£o para PENDENTE
                criarNotificacao(historico.getCliente(),
                        "‚ö†Ô∏è Sua parcela de R$ " + parcela.getValor() + " foi atualizada para PENDENTE, pois a data de pagamento ainda n√£o venceu.");

                System.out.println("‚úÖ Parcela #" + parcela.getId() + " atualizada para PENDENTE.");
            }

            // üîπ Verifica se a parcela atrasada j√° foi paga
            if (parcela.getStatus() == StatusParcela.PAGO) {
                boolean temOutrasAtrasadas = parcelasRepository.findByHistorico(historico)
                        .stream().anyMatch(p -> p.getStatus() == StatusParcela.ATRASADO);

                // ‚úÖ Se n√£o houver mais atrasadas, muda status do hist√≥rico para PENDENTE
                if (!temOutrasAtrasadas && historico.getStatus() == Status.ATRASADO) {
                    historico.setStatus(Status.PENDENTE);
                    historicoRepository.save(historico);

                    criarNotificacao(historico.getCliente(),
                            "‚ö†Ô∏è Seu empr√©stimo #" + historico.getId() + " voltou para o status PENDENTE.");

                    System.out.println("‚úÖ Hist√≥rico #" + historico.getId() + " voltou para PENDENTE.");
                }
            }
        }
    }


    public void atualizarStatusHistorico(Historico historico) {
        if (historico == null) return;

        // üîπ Obt√©m todas as parcelas associadas ao hist√≥rico
        List<Parcelas> parcelas = parcelasRepository.findByHistorico(historico);

        // üîπ Se n√£o houver parcelas, mant√©m o status atual
        if (parcelas.isEmpty()) return;

        // üîπ Verifica se existem parcelas atrasadas (-1)
        boolean temParcelasAtrasadas = parcelas.stream().anyMatch(parcela -> parcela.getPagas() == -1);

        // üîπ Verifica se existem parcelas pendentes (0)
        boolean temParcelasPendentes = parcelas.stream().anyMatch(parcela -> parcela.getPagas() == 0);

        // üîπ Obt√©m a √∫ltima parcela registrada
        Parcelas ultimaParcela = parcelas.stream()
                .max(Comparator.comparing(Parcelas::getId))
                .orElse(null);

        // ‚úÖ Se houver parcelas atrasadas, o status do hist√≥rico ser√° ATRASADO
        if (temParcelasAtrasadas) {
            historico.setStatus(Status.ATRASADO);
        }
        // ‚úÖ Se a √∫ltima parcela foi paga e n√£o h√° parcelas pendentes, o hist√≥rico fica como PAGO
        else if (ultimaParcela != null && ultimaParcela.getPagas() == 1 && !temParcelasPendentes) {
            historico.setStatus(Status.PAGO);
            System.out.println("‚úÖ Hist√≥rico #" + historico.getId() + " foi atualizado para PAGO.");
        }
        // ‚úÖ Se ainda houver parcelas a serem pagas, mant√©m como PENDENTE
        else {
            historico.setStatus(Status.PENDENTE);
        }

        historicoRepository.save(historico);
    }


    public void criarNovaParcelaComValorRestante(Parcelas ultimaParcela, double valorPago, double valorMensal) {
        double valorRestante = valorMensal - valorPago;
        Historico historico = ultimaParcela.getHistorico();

        // üîπ Verifica se a √∫ltima parcela √© realmente a √∫ltima do parcelamento original
        boolean isUltimaParcelaDoParcelamento = ultimaParcela.getParcelas() == historico.getParcelamento();

        System.out.println("üìä Verifica√ß√£o de cria√ß√£o de nova parcela:");
        System.out.println("   üî∏ Valor Restante: " + valorRestante);
        System.out.println("   üî∏ √öltima Parcela no Hist√≥rico: " + ultimaParcela.getParcelas());
        System.out.println("   üî∏ Parcelamento Original do Hist√≥rico: " + historico.getParcelamento());
        System.out.println("   üî∏ √â a √öltima Parcela do Parcelamento? " + isUltimaParcelaDoParcelamento);

        // ‚úÖ Define a data de vencimento da nova parcela para o pr√≥ximo m√™s
        Calendar calendar = Calendar.getInstance();
        if (ultimaParcela.getDataPagamento() != null) {
            calendar.setTime(ultimaParcela.getDataPagamento());
        } else {
            calendar.setTime(new Date());
        }
        calendar.add(Calendar.MONTH, 1);
        Date proximaDataPagamento = calendar.getTime();

        // üîç Verifica se j√° existe uma parcela com a data esperada
        boolean existeParcelaFutura = parcelasRepository.findByHistorico(historico).stream()
                .anyMatch(parcela -> parcela.getDataPagamento() != null
                        && parcela.getDataPagamento().equals(proximaDataPagamento));

        System.out.println("üìÖ Pr√≥xima Data Esperada: " + proximaDataPagamento);
        System.out.println("‚ùì Existe uma parcela futura j√° registrada? " + existeParcelaFutura);

        // ‚úÖ S√≥ cria uma nova parcela se:
        // 1. O valor restante for significativo (maior que 0.01 para evitar problemas de arredondamento)
        // 2. A √∫ltima parcela atual for realmente a √∫ltima do parcelamento original
        // 3. N√£o existir uma parcela futura j√° registrada na data esperada
        if (valorRestante > 0.01 && isUltimaParcelaDoParcelamento && !existeParcelaFutura) {
            Parcelas novaParcela = new Parcelas();

            // ‚úÖ Configura a nova parcela no mesmo hist√≥rico
            novaParcela.setHistorico(historico);
            novaParcela.setValor(valorRestante);
            novaParcela.setPagas(0); // üîπ Nova parcela deve ser paga
            novaParcela.setStatus(StatusParcela.PENDENTE);

            // ‚úÖ Incrementa o n√∫mero de parcelas no hist√≥rico e define na nova parcela
            historico.setParcelamento(historico.getParcelamento() + 1);
            historicoRepository.save(historico); // üîπ Salva o hist√≥rico atualizado

            novaParcela.setParcelas(historico.getParcelamento());
            novaParcela.setDataPagamento(proximaDataPagamento);

            // ‚úÖ Salva a nova parcela no banco de dados
            parcelasRepository.save(novaParcela);
            System.out.println("‚úÖ Nova parcela criada: ID " + novaParcela.getId() + " com valor restante de R$ " + valorRestante);

            // ‚úÖ Atualiza o status do hist√≥rico ap√≥s a cria√ß√£o da nova parcela
            atualizarStatusHistorico(historico);
        } else {
            System.out.println("‚ö†Ô∏è Nenhuma nova parcela foi criada. Motivos poss√≠veis:");
            if (valorRestante <= 0.01) {
                System.out.println("   üî∏ O valor restante √© zero ou muito pequeno: " + valorRestante);
            }
            if (!isUltimaParcelaDoParcelamento) {
                System.out.println("   üî∏ A parcela atual n√£o √© a √∫ltima do parcelamento original.");
            }
            if (existeParcelaFutura) {
                System.out.println("   üî∏ J√° existe uma parcela registrada para a pr√≥xima data esperada.");
            }
        }
    }

    /**
     * Atualiza automaticamente o status de parcelas vencidas a cada 1 minuto.
     */

    @Scheduled(fixedRate = 30000)
    public void atualizarStatusParcelasVencidas() {
        List<Parcelas> parcelas = parcelasRepository.findAll();
        Date hoje = new Date();

        for (Parcelas parcela : parcelas) {
            if (parcela.getDataPagamento() == null) continue;

            Historico historico = parcela.getHistorico();

            // üîπ Atualiza para ATRASADO se a data de pagamento estiver no passado e n√£o estiver paga
            if (parcela.getDataPagamento().before(hoje) && parcela.getPagas() == 0) {
                parcela.setPagas(-1);
                parcela.setStatus(StatusParcela.ATRASADO);
                parcelasRepository.save(parcela);

                if (historico != null) {
                    atualizarStatusHistorico(historico);
                    criarNotificacao(historico.getCliente(),
                            "‚ùå Sua parcela de R$ " + parcela.getValor() + " venceu e est√° ATRASADA!");
                }
            }
        }
    }


    /**
     * Cria uma notifica√ß√£o associada ao cliente.
     */
    private void criarNotificacao(Clientes cliente, String mensagem) {
        if (cliente == null) return;

        Notification notificacao = new Notification();
        notificacao.setMessage(mensagem);
        notificacao.setCreatedAt(LocalDateTime.now());
        notificacao.setRead(false);

        notificationRepository.save(notificacao);
    }
}


